/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
    // creating a minHeap so that elements come in the sequence ..
    // ascendingnorder...
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    //traveling through the lists...
        for(ListNode head : lists){
            while(head!=null){
    // adding th elements in a minheap...
                minHeap.add(head.val);
                head = head.next;
            }
        }
     // creating a list Node which is to be return ...
        ListNode dummyHead = new ListNode(-1);
     // creating a refernce pointer to the dummyhead for adding the lement in the listnode..
        ListNode head = dummyHead;
        while(!minHeap.isEmpty()){
            head.next = new ListNode(minHeap.remove());
            head = head.next;
        }
        return dummyHead.next;
    }
}
